{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../common/common.service\";\nimport * as i2 from \"src/app/Common/api-url-helper/apiUrlHelper\";\nclass SubscriptionService {\n  constructor(commonService, apiUrl) {\n    this.commonService = commonService;\n    this.apiUrl = apiUrl;\n  }\n  GetSubscriptionData(userId) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.GetAllSubscription.replace(\"{userId}\", userId);\n      this.commonService.doGet(apiUrl).pipe().subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  GetCardDetails(Id) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.GetCustomerCards.replace(\"{customerId}\", Id);\n      this.commonService.doGet(apiUrl).pipe().subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  removeCustomerCard(cardId) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.RemoveCustomerCard.replace(\"{CardId}\", cardId);\n      this.commonService.doGet(apiUrl).pipe().subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  setDefaultCard(customercard) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.SetDefaultCard;\n      this.commonService.doPost(apiUrl, customercard).pipe().subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  CancelSubscription(userId) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.CancelSubscription.replace(\"{userId}\", userId);\n      this.commonService.doGet(apiUrl).pipe().subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  UpgradeSubscription(objData) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.UpgradeSubscription;\n      this.commonService.doPost(apiUrl, objData).pipe().subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  getStripeDetailsById(userId) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.GetStripeDetailsById.replace(\"{userId}\", userId);\n      this.commonService.doGet(apiUrl).pipe().subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  InitiatePayment() {\n    const apiUrl = this.apiUrl.apiUrl.subscription.InitiatePayment;\n    return this.commonService.doGet(apiUrl);\n  }\n  CreateStripeCustomer(customer) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.AddCustomerCard;\n      this.commonService.doPost(apiUrl, customer).subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  ConfirmPayment(obj) {\n    return new Promise((resolve, reject) => {\n      const apiUrl = this.apiUrl.apiUrl.subscription.ConfirmPayment;\n      this.commonService.doPost(apiUrl, obj).subscribe({\n        next: data => {\n          resolve(data);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n  static #_ = this.ɵfac = function SubscriptionService_Factory(t) {\n    return new (t || SubscriptionService)(i0.ɵɵinject(i1.CommonService), i0.ɵɵinject(i2.ApiUrlHelper));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubscriptionService,\n    factory: SubscriptionService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { SubscriptionService };","map":{"version":3,"names":["SubscriptionService","constructor","commonService","apiUrl","GetSubscriptionData","userId","Promise","resolve","reject","subscription","GetAllSubscription","replace","doGet","pipe","subscribe","next","data","error","GetCardDetails","Id","GetCustomerCards","removeCustomerCard","cardId","RemoveCustomerCard","setDefaultCard","customercard","SetDefaultCard","doPost","CancelSubscription","UpgradeSubscription","objData","getStripeDetailsById","GetStripeDetailsById","InitiatePayment","CreateStripeCustomer","customer","AddCustomerCard","ConfirmPayment","obj","_","i0","ɵɵinject","i1","CommonService","i2","ApiUrlHelper","_2","factory","ɵfac","providedIn"],"sources":["C:\\vivek\\Angular\\Stripe_demo\\src\\app\\Services\\subscription\\subscription.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CommonService } from '../common/common.service';\r\n\r\n\r\n\r\n\r\n\r\nimport { ApiUrlHelper } from 'src/app/Common/api-url-helper/apiUrlHelper';\r\nimport { StripeCustomer } from 'src/app/Model/payment/subscription';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubscriptionService {\r\n\r\n  constructor(private commonService: CommonService,\r\n    private apiUrl: ApiUrlHelper) { }\r\n\r\n  GetSubscriptionData(userId: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.GetAllSubscription.replace(\"{userId}\", userId);\r\n      this.commonService.doGet(apiUrl).pipe().subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  GetCardDetails(Id: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.GetCustomerCards.replace(\"{customerId}\", Id);\r\n      this.commonService.doGet(apiUrl).pipe().subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  \r\n  removeCustomerCard(cardId: string) {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.RemoveCustomerCard.replace(\"{CardId}\", cardId)\r\n      this.commonService.doGet(apiUrl).pipe().subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  setDefaultCard(customercard: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.SetDefaultCard\r\n      this.commonService.doPost(apiUrl, customercard).pipe().subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  CancelSubscription(userId: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.CancelSubscription.replace(\"{userId}\", userId)\r\n      this.commonService.doGet(apiUrl).pipe().subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      });\r\n    })\r\n  }\r\n\r\n  UpgradeSubscription(objData: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.UpgradeSubscription\r\n      this.commonService.doPost(apiUrl, objData).pipe().subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      });\r\n    })\r\n  }\r\n\r\n  getStripeDetailsById(userId: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.GetStripeDetailsById.replace(\"{userId}\", userId)\r\n      this.commonService.doGet(apiUrl).pipe().subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  InitiatePayment(){\r\n    const apiUrl = this.apiUrl.apiUrl.subscription.InitiatePayment\r\n    return this.commonService.doGet(apiUrl);\r\n  }\r\n\r\n  CreateStripeCustomer(customer: StripeCustomer) {\r\n    return new Promise((resolve,reject)=>{\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.AddCustomerCard\r\n      this.commonService.doPost(apiUrl, customer).subscribe({\r\n        next: (data) => {\r\n          resolve(data);\r\n        },\r\n        error: (error) => {\r\n          reject(error);\r\n        }\r\n      });\r\n    })\r\n   \r\n  }\r\n\r\n  ConfirmPayment(obj : any){\r\n    return new Promise((resolve,reject)=>{\r\n      const apiUrl = this.apiUrl.apiUrl.subscription.ConfirmPayment\r\n      this.commonService.doPost(apiUrl,obj).subscribe({\r\n        next: (data)=>{\r\n          resolve(data);\r\n        },\r\n        error:(error)=> {\r\n          reject(error);\r\n        }\r\n      })\r\n    })\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}