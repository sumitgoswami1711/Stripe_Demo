{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nlet StorageService = class StorageService {\n  constructor(commonService) {\n    this.commonService = commonService;\n    this.userName = new Subject();\n    this.profilePicture = new Subject();\n  }\n  getValue(key) {\n    return localStorage.getItem(key);\n  }\n  setValue(key, value) {\n    localStorage.setItem(key, value);\n  }\n  removeValue(key) {\n    localStorage.removeItem(key);\n  }\n  updateUserDetails(firstName, lastName, profilPhoto) {\n    if (firstName != null && lastName != null) {\n      let userName = firstName + \" \" + lastName;\n      this.setValue(StorageKey.userfullname, userName);\n      this.setValue(StorageKey.firstName, this.commonService.Encrypt(firstName));\n      this.setValue(StorageKey.lastName, this.commonService.Encrypt(lastName));\n      this.userName.next(userName);\n    }\n    if (profilPhoto != null && profilPhoto != \"\") {\n      this.setValue(StorageKey.profilePicture, profilPhoto);\n      this.profilePicture.next(profilPhoto);\n    }\n  }\n};\nStorageService = __decorate([Injectable({\n  providedIn: 'root'\n})], StorageService);\nexport { StorageService };\nclass StorageKey {\n  static #_ = this.currentUser = 'currentUser';\n  static #_2 = this.userfullname = 'userfullname';\n  static #_3 = this.authToken = 'authToken';\n  static #_4 = this.currentUserId = 'currentUserId';\n  static #_5 = this.firstName = 'firstName';\n  static #_6 = this.lastName = 'lastName';\n  static #_7 = this.isEdited = 'isEdited';\n  static #_8 = this.roleId = 'roleId';\n  static #_9 = this.profilePicture = 'profilePicture';\n  static #_10 = this.fcm_token = 'FCM_Token';\n  static #_11 = this.stripeCustomerId = 'stripeCustomerId';\n  static #_12 = this.planId = 'planId';\n  static #_13 = this.streamChannelName = 'streamChannelName';\n  static #_14 = this.endDate = 'endDate';\n}\nexport { StorageKey };","map":{"version":3,"names":["Injectable","Subject","StorageService","constructor","commonService","userName","profilePicture","getValue","key","localStorage","getItem","setValue","value","setItem","removeValue","removeItem","updateUserDetails","firstName","lastName","profilPhoto","StorageKey","userfullname","Encrypt","next","__decorate","providedIn","_","currentUser","_2","_3","authToken","_4","currentUserId","_5","_6","_7","isEdited","_8","roleId","_9","_10","fcm_token","_11","stripeCustomerId","_12","planId","_13","streamChannelName","_14","endDate"],"sources":["C:\\vivek\\Angular\\Stripe_demo\\src\\app\\Services\\storage\\storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { CommonService } from '../common.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class StorageService {\r\n\r\n  userName = new Subject<string>();\r\n  profilePicture = new Subject<any>();\r\n  constructor(private commonService: CommonService) {\r\n  }\r\n\r\n  getValue(key: string): any {\r\n    return localStorage.getItem(key);\r\n  }\r\n\r\n  setValue(key: string, value: string): void {\r\n    localStorage.setItem(key, value);\r\n  }\r\n\r\n  removeValue(key: string): void {\r\n    localStorage.removeItem(key);\r\n  }\r\n\r\n  updateUserDetails(firstName: string | null, lastName: string | null,profilPhoto: string | null) {\r\n    if (firstName != null && lastName != null) {\r\n      let userName = firstName + \" \" + lastName;  \r\n      this.setValue(StorageKey.userfullname, userName);\r\n      this.setValue(StorageKey.firstName, this.commonService.Encrypt(firstName));\r\n      this.setValue(StorageKey.lastName, this.commonService.Encrypt(lastName));\r\n      this.userName.next(userName);\r\n    }\r\n    if (profilPhoto != null && profilPhoto != \"\") {\r\n      this.setValue(StorageKey.profilePicture, profilPhoto);\r\n      this.profilePicture.next(profilPhoto);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport class StorageKey {\r\n  public static currentUser = 'currentUser';\r\n  public static userfullname = 'userfullname';\r\n  public static authToken = 'authToken';\r\n  public static currentUserId = 'currentUserId';\r\n  public static firstName = 'firstName';\r\n  public static lastName = 'lastName';\r\n  public static isEdited = 'isEdited';\r\n  public static roleId = 'roleId';\r\n  public static profilePicture = 'profilePicture';\r\n  public static fcm_token = 'FCM_Token';\r\n  public static stripeCustomerId = 'stripeCustomerId';\r\n  public static planId = 'planId';\r\n  public static streamChannelName='streamChannelName';\r\n  public static endDate = 'endDate';\r\n}\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,OAAO,QAAQ,MAAM;AAM9B,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAIzBC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAFjC,KAAAC,QAAQ,GAAG,IAAIJ,OAAO,EAAU;IAChC,KAAAK,cAAc,GAAG,IAAIL,OAAO,EAAO;EAEnC;EAEAM,QAAQA,CAACC,GAAW;IAClB,OAAOC,YAAY,CAACC,OAAO,CAACF,GAAG,CAAC;EAClC;EAEAG,QAAQA,CAACH,GAAW,EAAEI,KAAa;IACjCH,YAAY,CAACI,OAAO,CAACL,GAAG,EAAEI,KAAK,CAAC;EAClC;EAEAE,WAAWA,CAACN,GAAW;IACrBC,YAAY,CAACM,UAAU,CAACP,GAAG,CAAC;EAC9B;EAEAQ,iBAAiBA,CAACC,SAAwB,EAAEC,QAAuB,EAACC,WAA0B;IAC5F,IAAIF,SAAS,IAAI,IAAI,IAAIC,QAAQ,IAAI,IAAI,EAAE;MACzC,IAAIb,QAAQ,GAAGY,SAAS,GAAG,GAAG,GAAGC,QAAQ;MACzC,IAAI,CAACP,QAAQ,CAACS,UAAU,CAACC,YAAY,EAAEhB,QAAQ,CAAC;MAChD,IAAI,CAACM,QAAQ,CAACS,UAAU,CAACH,SAAS,EAAE,IAAI,CAACb,aAAa,CAACkB,OAAO,CAACL,SAAS,CAAC,CAAC;MAC1E,IAAI,CAACN,QAAQ,CAACS,UAAU,CAACF,QAAQ,EAAE,IAAI,CAACd,aAAa,CAACkB,OAAO,CAACJ,QAAQ,CAAC,CAAC;MACxE,IAAI,CAACb,QAAQ,CAACkB,IAAI,CAAClB,QAAQ,CAAC;;IAE9B,IAAIc,WAAW,IAAI,IAAI,IAAIA,WAAW,IAAI,EAAE,EAAE;MAC5C,IAAI,CAACR,QAAQ,CAACS,UAAU,CAACd,cAAc,EAAEa,WAAW,CAAC;MACrD,IAAI,CAACb,cAAc,CAACiB,IAAI,CAACJ,WAAW,CAAC;;EAEzC;CAED;AAjCYjB,cAAc,GAAAsB,UAAA,EAH1BxB,UAAU,CAAC;EACVyB,UAAU,EAAE;CACb,CAAC,C,EACWvB,cAAc,CAiC1B;SAjCYA,cAAc;AAmC3B,MAAakB,UAAU;EAAA,QAAAM,CAAA,GACP,KAAAC,WAAW,GAAG,aAAa;EAAA,QAAAC,EAAA,GAC3B,KAAAP,YAAY,GAAG,cAAc;EAAA,QAAAQ,EAAA,GAC7B,KAAAC,SAAS,GAAG,WAAW;EAAA,QAAAC,EAAA,GACvB,KAAAC,aAAa,GAAG,eAAe;EAAA,QAAAC,EAAA,GAC/B,KAAAhB,SAAS,GAAG,WAAW;EAAA,QAAAiB,EAAA,GACvB,KAAAhB,QAAQ,GAAG,UAAU;EAAA,QAAAiB,EAAA,GACrB,KAAAC,QAAQ,GAAG,UAAU;EAAA,QAAAC,EAAA,GACrB,KAAAC,MAAM,GAAG,QAAQ;EAAA,QAAAC,EAAA,GACjB,KAAAjC,cAAc,GAAG,gBAAgB;EAAA,QAAAkC,GAAA,GACjC,KAAAC,SAAS,GAAG,WAAW;EAAA,QAAAC,GAAA,GACvB,KAAAC,gBAAgB,GAAG,kBAAkB;EAAA,QAAAC,GAAA,GACrC,KAAAC,MAAM,GAAG,QAAQ;EAAA,QAAAC,GAAA,GACjB,KAAAC,iBAAiB,GAAC,mBAAmB;EAAA,QAAAC,GAAA,GACrC,KAAAC,OAAO,GAAG,SAAS;;SAdtB7B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}