{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment, stripeConfig } from 'src/app/environments/environment';\nimport { StorageKey } from 'src/app/Services/storage/storage.service';\nconst stripe = Stripe(stripeConfig.publishKey);\nlet SubscriptionsComponent = class SubscriptionsComponent {\n  constructor(toster, commonService, spinner, subscriptionService, route, storage, paymentService, datePipe, fb) {\n    this.toster = toster;\n    this.commonService = commonService;\n    this.spinner = spinner;\n    this.subscriptionService = subscriptionService;\n    this.route = route;\n    this.storage = storage;\n    this.paymentService = paymentService;\n    this.datePipe = datePipe;\n    this.fb = fb;\n    this.SubscriptionList = [];\n    this.CardList = [];\n    this.charges = 0;\n    this.isDefultCard = null;\n    this.baseURL = environment.BaseURL.replace(\"api/\", \"\");\n    this.isActive = false;\n    this.todayDate = this.datePipe.transform(new Date(), 'MMM d, y, h:mm:ss a');\n  }\n  ngOnInit() {\n    this.GetStripeDetailsById();\n    window.scrollTo(0, 0);\n    this.GetSubscriptionData();\n    this.GetSavedCardList();\n  }\n  GetStripeDetailsById() {\n    this.spinner.show();\n    const userId = this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId));\n    this.subscriptionService.getStripeDetailsById(userId).then(data => {\n      if (data != null) {\n        this.customerId = data.data.customerId;\n        this.planId = data.data.planId;\n        this.isActive = data.data.isActive;\n        this.scheduleId = data.data.scheduleId;\n        this.endDate = this.datePipe.transform(data.data.endDate, 'MMM d, y, h:mm:ss a');\n        this.cancaleDate = this.datePipe.transform(data.data.cancelDate, 'MMM d, y, h:mm:ss a');\n        if (this.planId != null) {\n          this.GetSubscriptionById();\n        }\n      } else {}\n    }).catch(error => {\n      this.spinner.hide();\n    });\n  }\n  GetSubscriptionById() {\n    this.spinner.show();\n    this.paymentService.GetSubscriptionPlanById(this.planId).then(data => {\n      if (data && data.success) {\n        this.planName = data.data.planName;\n        this.charges = parseInt(data.data.charges);\n      }\n    }).catch(error => {\n      this.toster.error(error.error.message);\n    });\n  }\n  GetSubscriptionData() {\n    this.spinner.show();\n    const userId = this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId));\n    this.subscriptionService.GetSubscriptionData(userId).then(data => {\n      this.spinner.hide();\n      if (data && data.success) {\n        this.SubscriptionList = data.data;\n      } else {\n        this.toster.error(data.message);\n      }\n    }).catch(error => {\n      this.spinner.hide();\n    });\n  }\n  GetSavedCardList() {\n    this.spinner.show();\n    this.customerId = this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId));\n    if (this.customerId != 'null') {\n      this.subscriptionService.GetCardDetails(this.customerId).then(data => {\n        this.spinner.hide();\n        if (data && data.success) {\n          this.CardList = data.data.data;\n        }\n      }).catch(error => {\n        this.spinner.hide();\n        this.toster.error(error.error.message);\n      });\n    }\n  }\n  onSubmit(id) {\n    const paymentId = this.commonService.Encrypt(id);\n    this.route.navigate([\"pay\", paymentId]);\n  }\n  CancelSubscription() {\n    this.spinner.show();\n    this.customerId = this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId));\n    this.subscriptionService.CancelSubscription(this.customerId).then(data => {\n      this.spinner.hide();\n      if (data && data.success) {\n        this.toster.success(data.message);\n        this.route.navigate([\"match\"]);\n      } else {\n        this.toster.error(data.message);\n      }\n    }).catch(error => {\n      this.toster.error(error.error.message);\n      this.spinner.hide();\n    });\n  }\n};\nSubscriptionsComponent = __decorate([Component({\n  selector: 'app-subscriptions',\n  templateUrl: './subscriptions.component.html',\n  styleUrls: ['./subscriptions.component.css']\n})], SubscriptionsComponent);\nexport { SubscriptionsComponent };","map":{"version":3,"names":["Component","environment","stripeConfig","StorageKey","stripe","Stripe","publishKey","SubscriptionsComponent","constructor","toster","commonService","spinner","subscriptionService","route","storage","paymentService","datePipe","fb","SubscriptionList","CardList","charges","isDefultCard","baseURL","BaseURL","replace","isActive","todayDate","transform","Date","ngOnInit","GetStripeDetailsById","window","scrollTo","GetSubscriptionData","GetSavedCardList","show","userId","Decrypt","getValue","currentUserId","getStripeDetailsById","then","data","customerId","planId","scheduleId","endDate","cancaleDate","cancelDate","GetSubscriptionById","catch","error","hide","GetSubscriptionPlanById","success","planName","parseInt","message","GetCardDetails","onSubmit","id","paymentId","Encrypt","navigate","CancelSubscription","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\vivek\\Angular\\Stripe_demo\\src\\Pages\\subscriptions\\subscriptions.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { DatePipe } from '@angular/common';\r\n\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { SubscriptionService } from 'src/app/Services/subscription/subscription.service';\r\nimport { PaymentService } from 'src/app/Services/payment/payment.service';\r\nimport { environment, stripeConfig } from 'src/app/environments/environment';\r\nimport { StripeCustomer, subscription } from 'src/app/Model/payment/subscription';\r\nimport { CommonService } from 'src/app/Services/common/common.service';\r\nimport { StorageKey, StorageService } from 'src/app/Services/storage/storage.service';\r\nimport { ToastrMessageService } from 'src/app/Services/toastr-service/toastr-message.service';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { MatDialog } from '@angular/material/dialog';\r\ndeclare var Stripe: any;\r\n\r\nconst stripe = Stripe(stripeConfig.publishKey);\r\n@Component({\r\n  selector: 'app-subscriptions',\r\n  templateUrl: './subscriptions.component.html',\r\n  styleUrls: ['./subscriptions.component.css']\r\n})\r\nexport class SubscriptionsComponent  {\r\n  registerForm: FormGroup | undefined;\r\n  SubscriptionList: any = [];\r\n  stripeCustomer: StripeCustomer | any;\r\n  searchText: string | undefined;\r\n  CardList: any = [];\r\n  subscriptionModel: subscription | undefined;\r\n  customerId: any;\r\n  CardAddForm: FormGroup | undefined;\r\n  cardToken: any;\r\n  planId: any;\r\n  planName: any;\r\n  charges: number = 0;\r\n  isDefultCard: string | null = null;\r\n  baseURL: string = environment.BaseURL.replace(\"api/\", \"\");\r\n  endDate: any;\r\n  isActive: boolean = false;\r\n  todayDate: any = this.datePipe.transform(new Date(), 'MMM d, y, h:mm:ss a');\r\n  cancaleDate: any;\r\n  PaymentSecrectKey: any;\r\n  scheduleId: any;\r\n\r\n  constructor(\r\n    private toster: ToastrMessageService,\r\n    public commonService: CommonService,\r\n    private spinner: NgxSpinnerService,\r\n    private subscriptionService: SubscriptionService,\r\n    private route: Router,\r\n    private storage: StorageService,\r\n    private paymentService: PaymentService,\r\n    private datePipe: DatePipe,\r\n    private fb: FormBuilder\r\n  ) {\r\n    \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.GetStripeDetailsById();\r\n    window.scrollTo(0, 0);\r\n    this.GetSubscriptionData();\r\n    this.GetSavedCardList();\r\n  }\r\n\r\n  GetStripeDetailsById() {\r\n    this.spinner.show();\r\n    const userId = this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId))\r\n    this.subscriptionService.getStripeDetailsById(userId).then((data: any) => {\r\n      if (data != null) {\r\n        this.customerId = data.data.customerId;\r\n        this.planId = data.data.planId;\r\n        this.isActive = data.data.isActive;\r\n        this.scheduleId = data.data.scheduleId;\r\n        this.endDate = this.datePipe.transform(data.data.endDate, 'MMM d, y, h:mm:ss a');\r\n        this.cancaleDate = this.datePipe.transform(data.data.cancelDate, 'MMM d, y, h:mm:ss a');\r\n        if (this.planId != null) {\r\n          this.GetSubscriptionById();\r\n        }\r\n      }\r\n      else {\r\n      }\r\n    }).catch((error: any) => {\r\n      this.spinner.hide();\r\n    })\r\n  }\r\n\r\n  GetSubscriptionById() {\r\n    this.spinner.show();\r\n    this.paymentService.GetSubscriptionPlanById(this.planId).then((data: any) => {\r\n      if (data && data.success) {\r\n        this.planName = data.data.planName;\r\n        this.charges = parseInt(data.data.charges);\r\n      }\r\n    }).catch((error: any) => {\r\n      this.toster.error(error.error.message);\r\n    })\r\n  }\r\n\r\n  GetSubscriptionData() {\r\n    this.spinner.show();\r\n    const userId = this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId))\r\n    this.subscriptionService.GetSubscriptionData(userId).then((data: any) => {\r\n      this.spinner.hide();\r\n      if (data && data.success) {\r\n        this.SubscriptionList = data.data;\r\n      }\r\n      else {\r\n        this.toster.error(data.message);\r\n      }\r\n    }).catch((error: any) => {\r\n      this.spinner.hide();\r\n    });\r\n  }\r\n\r\n  GetSavedCardList() {\r\n    this.spinner.show();\r\n    this.customerId = (this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId)));\r\n    if (this.customerId != 'null') {\r\n      this.subscriptionService.GetCardDetails(this.customerId).then((data: any) => {\r\n        this.spinner.hide();\r\n        if (data && data.success) {\r\n          this.CardList = data.data.data;\r\n        }\r\n      }).catch((error) => {\r\n        this.spinner.hide();\r\n        this.toster.error(error.error.message);\r\n      });\r\n    }\r\n  }\r\n\r\n  onSubmit(id: string) {\r\n    const paymentId = this.commonService.Encrypt(id)\r\n    this.route.navigate([\"pay\",paymentId])\r\n  }\r\n\r\n \r\n\r\n  CancelSubscription() {\r\n    this.spinner.show();\r\n    this.customerId = (this.commonService.Decrypt(this.storage.getValue(StorageKey.currentUserId)))\r\n    this.subscriptionService.CancelSubscription(this.customerId).then((data: any) => {\r\n      this.spinner.hide();\r\n      if (data && data.success) {\r\n        this.toster.success(data.message);\r\n        this.route.navigate([\"match\"]);\r\n      }\r\n      else {\r\n        this.toster.error(data.message);\r\n      }\r\n    }).catch((error) => {\r\n      this.toster.error(error.error.message);\r\n      this.spinner.hide();\r\n    })\r\n  }\r\n\r\n \r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}