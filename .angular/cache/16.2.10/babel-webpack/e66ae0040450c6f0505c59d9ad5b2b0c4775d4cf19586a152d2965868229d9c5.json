{"ast":null,"code":"import { StorageKey } from 'src/app/Services/storage/storage.service';\nimport { environment } from 'src/app/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/Services/storage/storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/Services/toastr-service/toastr-message.service\";\nclass AuthService {\n  constructor(httpClient, storageService, router, toastr) {\n    this.httpClient = httpClient;\n    this.storageService = storageService;\n    this.router = router;\n    this.toastr = toastr;\n  }\n  login(apiUrl, data) {\n    return this.httpClient.post(`${environment.BaseURL}${apiUrl}`, data);\n  }\n  logout() {\n    this.clearLocalStorage();\n  }\n  clearLocalStorage() {\n    this.storageService.removeValue(StorageKey.currentUser);\n    this.storageService.removeValue(StorageKey.userfullname);\n    this.storageService.removeValue(StorageKey.authToken);\n    this.storageService.removeValue(StorageKey.currentUserId);\n    this.storageService.removeValue(StorageKey.firstName);\n    this.storageService.removeValue(StorageKey.lastName);\n    this.storageService.removeValue(StorageKey.isEdited);\n    this.storageService.removeValue(StorageKey.roleId);\n    this.storageService.removeValue(StorageKey.fcm_token);\n    this.storageService.removeValue(StorageKey.profilePicture);\n    this.storageService.removeValue(StorageKey.planId);\n    this.storageService.removeValue(StorageKey.stripeCustomerId);\n    this.storageService.removeValue(StorageKey.streamChannelName);\n  }\n  isLoggedIn() {\n    let token = this.storageService.getValue(StorageKey.authToken);\n    let currentUser = this.storageService.getValue(StorageKey.currentUserId);\n    if (token && currentUser) return true;else return false;\n  }\n  getAccessToken() {\n    let token = this.storageService.getValue(StorageKey.authToken);\n    return token ? token : null;\n  }\n  canActivate(route, state) {\n    if (this.storageService.getValue(StorageKey.authToken)) {\n      return true;\n    } else {\n      this.router.navigate(['/login'], {\n        queryParams: {\n          return: state.url\n        }\n      });\n      this.toastr.error(\"User not authorized.\");\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.ToastrMessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { AuthService };","map":{"version":3,"names":["StorageKey","environment","AuthService","constructor","httpClient","storageService","router","toastr","login","apiUrl","data","post","BaseURL","logout","clearLocalStorage","removeValue","currentUser","userfullname","authToken","currentUserId","firstName","lastName","isEdited","roleId","fcm_token","profilePicture","planId","stripeCustomerId","streamChannelName","isLoggedIn","token","getValue","getAccessToken","canActivate","route","state","navigate","queryParams","return","url","error","_","i0","ɵɵinject","i1","HttpClient","i2","StorageService","i3","Router","i4","ToastrMessageService","_2","factory","ɵfac","providedIn"],"sources":["C:\\vivek\\Angular\\Stripe_demo\\src\\app\\Common\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { StorageKey, StorageService } from 'src/app/Services/storage/storage.service';\r\nimport { ToastrMessageService } from 'src/app/Services/toastr-service/toastr-message.service';\r\nimport { environment } from 'src/app/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService implements CanActivate {\r\n\r\n  constructor(private httpClient: HttpClient,\r\n    private storageService: StorageService,\r\n    private router: Router,\r\n    private toastr: ToastrMessageService) { }\r\n\r\n  login(apiUrl: String, data: any): Observable<any> {\r\n    return this.httpClient.post(`${environment.BaseURL}${apiUrl}`, data);\r\n  }\r\n\r\n  logout() {\r\n    this.clearLocalStorage();\r\n  }\r\n\r\n  clearLocalStorage(){\r\n    this.storageService.removeValue(StorageKey.currentUser);\r\n    this.storageService.removeValue(StorageKey.userfullname);\r\n    this.storageService.removeValue(StorageKey.authToken);\r\n    this.storageService.removeValue(StorageKey.currentUserId);\r\n    this.storageService.removeValue(StorageKey.firstName);\r\n    this.storageService.removeValue(StorageKey.lastName);\r\n    this.storageService.removeValue(StorageKey.isEdited);\r\n    this.storageService.removeValue(StorageKey.roleId);\r\n    this.storageService.removeValue(StorageKey.fcm_token);\r\n    this.storageService.removeValue(StorageKey.profilePicture);\r\n    this.storageService.removeValue(StorageKey.planId);\r\n    this.storageService.removeValue(StorageKey.stripeCustomerId);\r\n    this.storageService.removeValue(StorageKey.streamChannelName);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    let token = this.storageService.getValue(StorageKey.authToken);\r\n    let currentUser = this.storageService.getValue(StorageKey.currentUserId);\r\n    if (token && currentUser)\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n\r\n  getAccessToken(): any {\r\n    let token = this.storageService.getValue(StorageKey.authToken);\r\n    return token ? token : null;\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    if (this.storageService.getValue(StorageKey.authToken)) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/login'], {\r\n        queryParams: {\r\n          return: state.url\r\n        }\r\n      });\r\n      this.toastr.error(\"User not authorized.\");\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}