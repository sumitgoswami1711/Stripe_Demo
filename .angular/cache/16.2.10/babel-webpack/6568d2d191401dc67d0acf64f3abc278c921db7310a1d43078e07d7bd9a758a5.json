{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { tap, catchError, of, BehaviorSubject } from 'rxjs';\nimport { Buffer } from 'buffer';\nimport { StorageKey } from '../storage/storage.service';\nimport { environment } from 'src/app/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders()\n};\nclass CommonService {\n  constructor(http) {\n    this.http = http;\n    this.key = CryptoJS.MD5(CryptoJS.enc.Utf8.parse('EA34FF3E-6DF2-4551-B59E-BB81D9564426'));\n    this.iv = {\n      ...this.key\n    };\n    this.errorMessage = \"Something went wrong. Please try again after sometime.\";\n    this.connectionEstablished = new EventEmitter();\n    this.connectionIsEstablished = false;\n    this.data = new BehaviorSubject({});\n    this.selectData = this.data.asObservable();\n    var tokenUserId = localStorage.getItem(StorageKey.currentUserId);\n    if (tokenUserId != null) {\n      this.userId = parseInt(this.Decrypt(tokenUserId.toString()));\n    }\n  }\n  doGet(apiUrl) {\n    const httpOptions = {\n      headers: new HttpHeaders()\n    };\n    const loginData = localStorage.getItem(StorageKey.authToken);\n    if (loginData) {\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Origin', '*');\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE, PUT');\n    }\n    const url = `${environment.BaseURL}${apiUrl}`;\n    return this.http.get(url, httpOptions);\n  }\n  doPost(apiUrl, postData) {\n    const loginData = localStorage.getItem(StorageKey.authToken);\n    if (loginData) {\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\n    }\n    const url = `${environment.BaseURL}${apiUrl}`;\n    return this.http.post(url, postData, httpOptions);\n  }\n  doPut(apiUrl, putData) {\n    const httpOptions = {\n      headers: new HttpHeaders()\n    };\n    let loginData = localStorage.getItem(StorageKey.authToken);\n    if (loginData) {\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Origin', '*');\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE, PUT');\n    }\n    const url = `${environment.BaseURL}${apiUrl}`;\n    return this.http.put(url, putData, httpOptions);\n  }\n  doDelete(apiUrl, idtoDelete) {\n    const loginData = localStorage.getItem(StorageKey.authToken);\n    if (loginData) {\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\n    }\n    const options = {\n      headers: httpOptions.headers,\n      body: {\n        id: idtoDelete\n      }\n    };\n    const url = `${environment.BaseURL}${apiUrl}`;\n    return this.http.delete(url, options);\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    console.log(\"Log from service : \" + message);\n  }\n  encodeBase64(plainString) {\n    return Buffer.from(plainString, \"ascii\").toString('base64');\n  }\n  decodeBase64(Base64String) {\n    if (Base64String) {\n      return Buffer.from(Base64String, 'base64').toString('ascii');\n    } else {\n      return '\"\"';\n    }\n  }\n  Encrypt(clearText) {\n    this.iv.sigBytes = 8;\n    var encrypted = CryptoJS.TripleDES.encrypt(CryptoJS.enc.Utf8.parse(clearText), this.key, {\n      keySize: 128 / 8,\n      iv: this.iv,\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.Pkcs7\n    });\n    return encrypted.toString();\n  }\n  Decrypt(cipherText) {\n    if (cipherText) {\n      this.iv.sigBytes = 8;\n      var decrypted = CryptoJS.TripleDES.decrypt(cipherText, this.key, {\n        keySize: 128 / 8,\n        iv: this.iv,\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n      });\n      return decrypted.toString(CryptoJS.enc.Utf8);\n      // console.log('Encrypted :' + encrypted);\n      // console.log('Key :' + encrypted.key);\n      // console.log('Salt :' + encrypted.salt);\n      // console.log('iv :' + encrypted.iv);\n      // console.log('Decrypted : ' + decrypted);\n      // console.log('utf8 = ' + decrypted.toString(CryptoJS.enc.Utf8));\n    } else {\n      return '\"\"';\n    }\n  }\n  updateFCMTokenData(data) {\n    const httpOptions = {\n      headers: new HttpHeaders()\n    };\n    let loginData = localStorage.getItem(StorageKey.authToken);\n    if (loginData) {\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Origin', '*');\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE, PUT');\n    }\n    const url = `${environment.BaseURL}${'Account/UpdateFCMToken'}`;\n    return this.http.post(url, data, httpOptions).pipe(tap(() => this.log(`doPost success`)), catchError(this.handleError(`doPost data = ${JSON.stringify(data)}`, {\n      data: null,\n      message: this.errorMessage,\n      success: false\n    })));\n    // return this.httpClient.post(`${environment.api_url}UserApi/UpdateFCMToken`, data);\n  }\n\n  setData(value) {\n    this.data.next(value);\n  }\n  createConnection() {\n    var tokenUserId = localStorage.getItem(StorageKey.currentUserId);\n    if (tokenUserId != null) {\n      this.userId = parseInt(this.Decrypt(tokenUserId.toString()));\n    }\n    this._hubConnection = new HubConnectionBuilder().withUrl(environment.CommonHubURL + this.userId).build();\n  }\n  registerOnServerEvents() {\n    this._hubConnection.on('GetAllNotifications', data => {\n      if (data.success) {\n        this.GetAllNotifications.emit(data.data);\n      }\n    });\n  }\n  getAllNotifications() {\n    this._hubConnection.send('GetAllNotifications');\n  }\n  static #_ = this.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { CommonService };\nexport var NotificationType;\n(function (NotificationType) {\n  NotificationType[NotificationType[\"INFO\"] = 1] = \"INFO\";\n  NotificationType[NotificationType[\"SUCCESS\"] = 2] = \"SUCCESS\";\n  NotificationType[NotificationType[\"WARNING\"] = 3] = \"WARNING\";\n  NotificationType[NotificationType[\"ERROR\"] = 4] = \"ERROR\";\n  NotificationType[NotificationType[\"SHOW\"] = 5] = \"SHOW\";\n})(NotificationType || (NotificationType = {}));","map":{"version":3,"names":["EventEmitter","HttpHeaders","tap","catchError","of","BehaviorSubject","Buffer","StorageKey","environment","httpOptions","headers","CommonService","constructor","http","key","CryptoJS","MD5","enc","Utf8","parse","iv","errorMessage","connectionEstablished","connectionIsEstablished","data","selectData","asObservable","tokenUserId","localStorage","getItem","currentUserId","userId","parseInt","Decrypt","toString","doGet","apiUrl","loginData","authToken","set","url","BaseURL","get","doPost","postData","post","doPut","putData","put","doDelete","idtoDelete","options","body","id","delete","handleError","operation","result","error","console","log","message","encodeBase64","plainString","from","decodeBase64","Base64String","Encrypt","clearText","sigBytes","encrypted","TripleDES","encrypt","keySize","mode","ECB","padding","pad","Pkcs7","cipherText","decrypted","decrypt","updateFCMTokenData","pipe","JSON","stringify","success","setData","value","next","createConnection","_hubConnection","HubConnectionBuilder","withUrl","CommonHubURL","build","registerOnServerEvents","on","GetAllNotifications","emit","getAllNotifications","send","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn","NotificationType"],"sources":["C:\\vivek\\Angular\\Stripe_demo\\src\\app\\Services\\common\\common.service.ts"],"sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, tap, catchError, of, BehaviorSubject, Subject } from 'rxjs';\r\nimport { Buffer } from 'buffer';\r\n\r\nimport { StorageKey } from '../storage/storage.service';\r\nimport { ApiResponse } from 'src/app/Model/models/ApiResponse';\r\nimport { BaseApiResponse } from 'src/app/Model/models/BaseApiRespnse';\r\nimport { environment } from 'src/app/environments/environment';\r\n\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders()\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonService {\r\n\r\n  private key = CryptoJS.MD5(CryptoJS.enc.Utf8.parse('EA34FF3E-6DF2-4551-B59E-BB81D9564426'));\r\n  private iv = { ...this.key };\r\n  private errorMessage: string = \"Something went wrong. Please try again after sometime.\";\r\n\r\n  connectionEstablished = new EventEmitter<Boolean>();\r\n \r\n  private connectionIsEstablished = false;\r\n  userId: number | undefined;\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {\r\n    var tokenUserId = localStorage.getItem(StorageKey.currentUserId);\r\n    if (tokenUserId != null) {\r\n      this.userId = parseInt(this.Decrypt(tokenUserId.toString()));\r\n    }\r\n  }\r\n\r\n  doGet(apiUrl: String): Observable<ApiResponse> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders()\r\n    };\r\n\r\n    const loginData = localStorage.getItem(StorageKey.authToken);\r\n    if (loginData) {\r\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\r\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Origin', '*');\r\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE, PUT');\r\n    }\r\n    const url = `${environment.BaseURL}${apiUrl}`;\r\n    return this.http.get<ApiResponse>(url, httpOptions);\r\n  }\r\n\r\n  doPost(apiUrl: string, postData: any): Observable<BaseApiResponse> {\r\n    const loginData = localStorage.getItem(StorageKey.authToken);\r\n    if (loginData) {\r\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\r\n    }\r\n    const url = `${environment.BaseURL}${apiUrl}`;\r\n    return this.http.post<ApiResponse>(url, postData, httpOptions);\r\n  }\r\n\r\n  doPut(apiUrl: string, putData: any): Observable<BaseApiResponse> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders()\r\n    };\r\n    let loginData = localStorage.getItem(StorageKey.authToken);\r\n    if (loginData) {\r\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\r\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Origin', '*');\r\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE, PUT');\r\n    }\r\n    const url = `${environment.BaseURL}${apiUrl}`;\r\n    return this.http.put<ApiResponse>(url, putData, httpOptions)\r\n  }\r\n\r\n  doDelete(apiUrl: String, idtoDelete: number): Observable<ApiResponse> {\r\n    const loginData = localStorage.getItem(StorageKey.authToken);\r\n    if (loginData) {\r\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\r\n    }\r\n\r\n    const options = {\r\n      headers: httpOptions.headers,\r\n      body: {\r\n        id: idtoDelete\r\n      }\r\n    };\r\n\r\n    const url = `${environment.BaseURL}${apiUrl}`;\r\n    return this.http.delete<ApiResponse>(url, options)\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a HeroService message with the MessageService */\r\n  private log(message: string) {\r\n    console.log(\"Log from service : \" + message);\r\n  }\r\n\r\n  encodeBase64(plainString: string): string {\r\n    return Buffer.from(plainString, \"ascii\").toString('base64');\r\n  }\r\n\r\n  decodeBase64(Base64String: string): string {\r\n    if (Base64String) {\r\n      return Buffer.from(Base64String, 'base64').toString('ascii');\r\n    } else {\r\n      return '\"\"';\r\n    }\r\n  }\r\n\r\n  public Encrypt(clearText: string): string {\r\n    this.iv.sigBytes = 8;\r\n    var encrypted = CryptoJS.TripleDES.encrypt(CryptoJS.enc.Utf8.parse(clearText), this.key,\r\n      {\r\n        keySize: 128 / 8,\r\n        iv: this.iv,\r\n        mode: CryptoJS.mode.ECB,\r\n        padding: CryptoJS.pad.Pkcs7\r\n      });\r\n    return encrypted.toString();\r\n  }\r\n\r\n  public Decrypt(cipherText: string): string {\r\n    if (cipherText) {\r\n      this.iv.sigBytes = 8;\r\n      var decrypted = CryptoJS.TripleDES.decrypt(cipherText, this.key,\r\n        {\r\n          keySize: 128 / 8,\r\n          iv: this.iv,\r\n          mode: CryptoJS.mode.ECB,\r\n          padding: CryptoJS.pad.Pkcs7\r\n        });\r\n      return decrypted.toString(CryptoJS.enc.Utf8);\r\n\r\n      // console.log('Encrypted :' + encrypted);\r\n      // console.log('Key :' + encrypted.key);\r\n      // console.log('Salt :' + encrypted.salt);\r\n      // console.log('iv :' + encrypted.iv);\r\n      // console.log('Decrypted : ' + decrypted);\r\n      // console.log('utf8 = ' + decrypted.toString(CryptoJS.enc.Utf8));\r\n    } else {\r\n      return '\"\"';\r\n    }\r\n  }\r\n\r\n  updateFCMTokenData(data: any): Observable<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders()\r\n    };\r\n    let loginData = localStorage.getItem(StorageKey.authToken);\r\n    if (loginData) {\r\n      httpOptions.headers = httpOptions.headers.set('Authorization', 'Bearer ' + loginData);\r\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Origin', '*');\r\n      httpOptions.headers = httpOptions.headers.set('Access-Control-Allow-Methods', 'POST, GET, OPTIONS, DELETE, PUT');\r\n    }\r\n    const url = `${environment.BaseURL}${'Account/UpdateFCMToken'}`;\r\n    return this.http.post<ApiResponse>(url, data, httpOptions).pipe(\r\n      tap(() => this.log(`doPost success`)),\r\n      catchError(this.handleError<ApiResponse>(\r\n        `doPost data = ${JSON.stringify(data)}`,\r\n        { data: null, message: this.errorMessage, success: false })\r\n      )\r\n    );\r\n\r\n\r\n    // return this.httpClient.post(`${environment.api_url}UserApi/UpdateFCMToken`, data);\r\n  }\r\n\r\n  private data = new BehaviorSubject<any>({});\r\n  selectData = this.data.asObservable();\r\n\r\n  setData(value: any) {\r\n    this.data.next(value);\r\n  }\r\n\r\n  public createConnection() {\r\n    var tokenUserId = localStorage.getItem(StorageKey.currentUserId);\r\n    if (tokenUserId != null) {\r\n      this.userId = parseInt(this.Decrypt(tokenUserId.toString()));\r\n    }\r\n    this._hubConnection = new HubConnectionBuilder()\r\n      .withUrl(environment.CommonHubURL + this.userId)\r\n      .build();\r\n  }\r\n\r\n  \r\n\r\n  public registerOnServerEvents(): void {\r\n    this._hubConnection.on('GetAllNotifications', (data: any) => {\r\n      if (data.success) {\r\n        this.GetAllNotifications.emit(data.data);\r\n      }\r\n    });\r\n  }\r\n\r\n  getAllNotifications() {\r\n    this._hubConnection.send('GetAllNotifications');\r\n  }\r\n}\r\n\r\nexport enum NotificationType {\r\n  INFO = 1,\r\n  SUCCESS = 2,\r\n  WARNING = 3,\r\n  ERROR = 4,\r\n  SHOW = 5\r\n}\r\n// @Injectable()\r\n// export class canActivate implements CanActivate {\r\n//   constructor(private authService: AuthService, private router: Router, private commonService: CommonService) { }\r\n//   async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n//     await this.authService.getMenuListByRoleId()\r\n//     let _url = state.url;\r\n//     // if (_url.includes(\"?\")) {\r\n//     //   let url = _url.split(\"?\")[0].substring(1).split(\"/\")[0];\r\n//     //   let encryptedid = decodeURIComponent(_url.split(\"?\")[1].split(\"=\")[1]);\r\n//     //   let decryptrdId = this.commonService.Decrypt(encryptedid);\r\n//     //   if (Number(decryptrdId) > 0) {\r\n//     //     let data = this.authService.role_rights.find(x => x.menu_url == \"/\" + url && x.menu_url != \"\");\r\n//     //     if (data.is_edit) {\r\n//     //       return true;\r\n//     //     }\r\n//     //   }\r\n//     //   else {\r\n//     //     if (Number(decryptrdId) == 0) {\r\n//     //       let data = this.authService.role_rights.find(x => x.menu_url == \"/\" + url && x.menu_url != \"\");\r\n//     //       if (data.is_add) {\r\n//     //         return true;\r\n//     //       }\r\n//     //     }\r\n//     //   }\r\n//     // }\r\n//     // else {\r\n//     //   let data = this.authService.role_rights.find(x => x.menu_url == _url && x.menu_url != \"\");\r\n//     //   if (data.is_view) {\r\n//     //     return true;\r\n//     //   }\r\n//     // }\r\n\r\n//     // let chk_url = this.authService.role_rights.filter(x => x.is_view == true && x.menu_url != \"\")\r\n//     // this.router.navigate([chk_url[0].menu_url]);\r\n//     return false;\r\n\r\n//   }\r\n\r\n// }\r\n\r\n// #region Date-Format\r\n// @Injectable()\r\n// export class CustomAdapter extends NgbDateAdapter<string> {\r\n\r\n//   readonly DELIMITER = '-';\r\n\r\n//   fromModel(value: string | null): NgbDateStruct | null {\r\n//     if (value) {\r\n//       const date = value.split(this.DELIMITER);\r\n//       return {\r\n//         day: parseInt(date[0], 10),\r\n//         month: parseInt(date[1], 10),\r\n//         year: parseInt(date[2], 10)\r\n//       };\r\n//     }\r\n//     return null;\r\n//   }\r\n\r\n//   toModel(date: NgbDateStruct | null): string | null {\r\n//     return date ? date.month + this.DELIMITER + date.day + this.DELIMITER + date.year : null;\r\n//   }\r\n// }\r\n\r\n// /**\r\n//  * This Service handles how the date is rendered and parsed from keyboard i.e. in the bound input field.\r\n//  */\r\n// @Injectable()\r\n// export class CustomDateParserFormatter extends NgbDateParserFormatter {\r\n\r\n//   readonly DELIMITER = '/';\r\n\r\n//   parse(value: string): NgbDateStruct | null {\r\n//     if (value) {\r\n//       const date = value.split(this.DELIMITER);\r\n//       return {\r\n//         day: parseInt(date[0], 10),\r\n//         month: parseInt(date[1], 10),\r\n//         year: parseInt(date[2], 10)\r\n//       };\r\n//     }\r\n//     return null;\r\n//   }\r\n\r\n//   format(date: NgbDateStruct | null): string {\r\n//     return date ? date.month + this.DELIMITER + date.day + this.DELIMITER + date.year : '';\r\n//   }\r\n// }\r\n//#endregion"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}